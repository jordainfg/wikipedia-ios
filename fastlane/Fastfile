# Customise this file, documentation can be found here:
# https://github.com/KrauseFx/fastlane/tree/master/docs

$:.unshift File.dirname(__FILE__)

default_platform :ios

configurations_to_test_on_pull = [
  {device: 'iPhone X', os: '12.4'},
  {device: 'iPad Air 2', os: '11.4'}
]

configurations_to_test = configurations_to_test_on_pull + [
  {device: 'iPhone X', os: '12.4', scheme: "WikipediaRTL"}
]

beta_cluster_configurations_to_test = [
  {device: 'iPhone X', os: '12.4', scheme: "Beta Cluster Tests"}
]

def get_devices_by_scheme_from_options(options)
  configs = options[:configurations] || [{device: 'iPhone X', os: '11.4'}]
  devices_by_scheme = {}
  configs.each do |options|
    scheme = options[:scheme] || 'Wikipedia'
    device = options[:device] || 'iPhone X'
    os = options[:os]         || '11.4'
    sim = "#{device} (#{os})"
    devices = devices_by_scheme[scheme] || []
    devices << sim
    devices_by_scheme[scheme] = devices
  end
  return devices_by_scheme
end

 
def get_version_number_from_options(options)
  scheme = options[:scheme] || 'Wikipedia'
  config = options[:configuration] || 'Release'
  return get_version_number(target: scheme, configuration: config)
end

def clean_out_reference_images
  UI.header "Step: Clear previous reference images"
  UI.command "FileUtils.rm_rf(Dir.glob('../WikipediaUnitTests/ReferenceImages_64/*'))"
  FileUtils.rm_rf(Dir.glob('../WikipediaUnitTests/ReferenceImages_64/*'))
end

platform :ios do
  before_all do
     # Set project for commit_version_bump, which seems to get confused by projects in other folders
     ENV['FL_BUILD_NUMBER_PROJECT'] = "Wikipedia.xcodeproj"
     ensure_git_status_clean if ENV['FL_ENSURE_CLEAN']
  end

  desc "Checks out the sha specified in the environment variables or the develop branch"
  lane :checkout do
    sha = ENV['SHA']
    if sha != nil
      puts sha
      commit = last_git_commit
      sh "git checkout #{sha}"
    end
  end

  desc "Runs linting (and eventually static analysis)"
  lane :analyze do
    read_xcversion
    xcodebuild(
      project: "Wikipedia.xcodeproj",
      scheme: "Wikipedia",
      configuration: "Debug",
      sdk: 'iphonesimulator',
      destination: 'platform=iOS Simulator,OS=11.4,name=iPhone 6',
      analyze: true
    )
  end

  desc "Runs tests on the primary platforms and configurations"
  lane :verify_test_platforms do
    verify({configurations: configurations_to_test})
  end
  
  desc "Runs tests against the beta cluster to check for upstream changes."
  lane :beta_cluster_tests do
    verify({configurations: beta_cluster_configurations_to_test})
  end

  desc "Runs tests on select platforms for verifying pull requests"
  lane :verify_pull_request do |options|
    verify({configurations: configurations_to_test_on_pull})
  end

  desc "Reads Xcode version from the .xcversion file and sets it using xcversion()"
  lane :read_xcversion do |options|
    xcversion(version: `cat ../.xcversion`)
  end

  desc "Runs unit tests, generates JUnit reports."
  lane :verify do |options|
    read_xcversion
    reset_simulator_contents
    devices_by_scheme = get_devices_by_scheme_from_options(options)
    devices_by_scheme.each do |scheme, devices|
      opts = {
        devices: devices,
        scheme: scheme,
        disable_concurrent_testing: true,
        project: 'Wikipedia.xcodeproj',
        buildlog_path: './build',
        output_directory: './build/reports',
        output_style: 'basic',
        configuration: 'Test',
        output_files: "#{scheme}.junit",
        output_types: 'junit'
      }
      scan(opts)
    end
  end
  
  desc "Records visual tests."
  lane :record_visual_tests do |options|
    read_xcversion
    clean_out_reference_images
    options[:configurations] ||= configurations_to_test 
    devices_by_scheme = get_devices_by_scheme_from_options(options)
    devices_by_scheme.each do |scheme, devices|
      opts = {
        devices: devices,
        scheme: scheme,
        disable_concurrent_testing: true,
        project: 'Wikipedia.xcodeproj',
        buildlog_path: './build',
        configuration: 'Test',
        xcargs: "GCC_PREPROCESSOR_DEFINITIONS='\$(value) WMF_VISUAL_TEST_RECORD_MODE=1'",
        fail_build: false,
        output_types: ''
      }
      scan(opts)
    end
  end
  
  desc "Increment the build number"
  lane :bump_build do |options|
    app_identifer = options[:app_identifier] || "org.wikimedia.wikipedia"
    increment_build_number({
      build_number: get_latest_alpha_or_beta_build_number + 1
    })
  end
  
  desc "Set the build number"
  lane :set_build_number do |options|
    build = options[:build] || 0
    increment_build_number({
      build_number: build
    })
  end
  
  desc "Set version number"
  lane :set_version_number do |options|
    increment_version_number(
      version_number: options[:version_number]
    )
  end

  desc "Increment the app version patch"
  lane :bump_patch do
    increment_version_number(
      bump_type: "patch"
    )
  end

  desc "Increment the app version minor"
  lane :bump_minor do
    increment_version_number(
      bump_type: "minor"
    )
  end

  desc "Increment the app version major"
  lane :bump_major do
    increment_version_number(
      bump_type: "major"
    )
  end

  desc "Add a tag for the current build number and push to repo."
  lane :tag do |options|
    prefix = options[:prefix] || "betas"
    build_number = options[:build_number] || options[:build] || get_build_number
    tag_name = "#{prefix}/#{build_number}"
    add_git_tag(tag: tag_name)
    sh "git push origin --tags"
  end

  desc "Add a tag for the current version number push to repo."
  lane :tag_release do |options|
    version = options[:version] || get_version_number_from_options(options)
    tag_name = "releases/#{version}"
    add_git_tag(tag: tag_name)
    sh "git push origin --tags"
  end

  desc "Build the app for distibution"
  lane :build do |options|
    project_dir = ".."
    build_dir = "../build"
    
    product_name = options[:product_name] || "Wikipedia"
    project_name = options[:project] || product_name
    scheme_name = options[:scheme] || product_name
    app_see_api_key = ENV['WMF_APP_SEE_API_KEY'] || ''
    version = options[:version] || ''
    number = options[:number] || ''
    
    read_xcversion
    
    sh "xcodebuild -project \"#{project_dir}/#{project_name}.xcodeproj\" -scheme \"#{scheme_name}\" -archivePath \"#{build_dir}/#{product_name}.xcarchive\" -allowProvisioningUpdates WMF_APP_SEE_API_KEY=#{app_see_api_key} archive"
    sh "open \"#{build_dir}/#{product_name}.xcarchive\"" #import the build to xcode
    sh "zip -rq \"#{build_dir}/#{product_name}_#{version}_(#{number}).xcarchive.zip\" \"#{build_dir}/#{product_name}.xcarchive\""
    sh "xcodebuild -exportArchive -exportOptionsPlist ExportOptions.plist -archivePath \"#{build_dir}/#{product_name}.xcarchive\" -exportPath \"#{build_dir}\" -allowProvisioningUpdates"
  end
  
  desc "updates version, builds, and pushes to TestFlight"
  lane :push_beta do |options|
    push(
      product_name: "Wikipedia (apps.wmflabs.org mobile-html)",
      app_identifier: "org.wikimedia.wikipedia",
      tag_prefix: "betas",
      build: options[:build]
    )
  end
  
  desc "updates version, builds, and pushes alpha to TestFlight"
  lane :push_alpha do |options|
    push(
      product_name: "Alpha",
      app_identifier: "org.wikimedia.wikipedia.tfalpha",
      tag_prefix: "alphas",
      build: options[:build]
    )
  end
  
  desc "updates version, builds, and pushes beta cluster to TestFlight"
  lane :push_beta_cluster do |options|
    push(
      product_name: "Beta Cluster",
      app_identifier: "org.wikimedia.wikipedia.tfbeta",
      tag_prefix: "beta_clusters",
      build: options[:build]
    )
  end
  
  desc "updates version, builds, and pushes beta cluster to TestFlight"
  lane :push_beta_app do |options|
    push(
      product_name: "Beta (apps.wmflabs.org mobile-html)",
      app_identifier: "org.wikimedia.wikipedia.tfbeta",
      tag_prefix: "beta_app",
      build: options[:build]
    )
  end
  
  lane :get_latest_tag_with_prefix do |options|
    prefix = options[:prefix] || "betas/"
    `git tag -l #{prefix}* --sort=-creatordate | head -n 1`
  end
  
  lane :get_latest_build_for_stage do |options|
    stage = options[:stage] || "beta"
    prefix = "#{stage}s/"
    get_latest_tag_with_prefix(prefix: prefix)[prefix.length..-1].to_i
  end
  
  lane :get_latest_alpha_or_beta_build_number do |options|
    [get_latest_build_for_stage(stage: "beta"), get_latest_build_for_stage(stage: "alpha")].max
  end

  desc "updates version, builds, and pushes to TestFlight"
  lane :push do |options|
    build_dir = "build"
    product_name = options[:product_name] || "Wikipedia"
    app_identifier = options[:app_identifier] || "org.wikimedia.wikipedia"
    ipa_path = "#{build_dir}/#{product_name}.ipa"
    build_number =  options[:build] || get_latest_alpha_or_beta_build_number + 1
    version = get_version_number_from_options(options)
    tag_prefix = options[:tag_prefix]

    increment_build_number(
      build_number: build_number
    )
    
    # the changelog was overwriting whatever custom test notes we added
    # changelog_from_git_commits(
    #   pretty: '- (%ae) %s', # Optional, lets you provide a custom format to apply to each commit when generating the changelog text
    #   tag_match_pattern: "#{tag_prefix}/*", # Optional, lets you search for a tag name that matches a glob(7) pattern
    #   include_merges: false # Optional, lets you filter out merge commits
    # )

    build(
      product_name: product_name,
      project: "Wikipedia",
      number: build_number,
      version: version
    )
    
    tag(
      prefix: tag_prefix,
      build_number: build_number
    )
    
    pilot(
      ipa: ipa_path,
      skip_waiting_for_build_processing: true,
      skip_submission: true,
      distribute_external: false,
      app_identifier:  app_identifier,
      beta_app_feedback_email: "mobile-ios-wikipedia@wikimedia.org"
    )
  end

  desc "Runs tests, version, tag, and push to the beta branch"
  lane :test_and_push_beta do

    verify_test_platforms
    push_beta

  end

  desc "Upload app store metadata"
  lane :upload_app_store_metadata do 
    deliver(skip_binary_upload: true, skip_screenshots: true)
  end
  
  desc "Runs tests, version, tag, and push to the beta branch"
  lane :submit_release do
    build = ENV['BUILD']
    raise "Must specifiy a BUILD." unless build.length > 0
    
    build_dir = "build"
    product_name = "Wikipedia"
    ipa_path = "#{build_dir}/#{product_name}.ipa"
    
    sh "git pull"
    sh "git checkout betas/#{sha}"

    app_review_information(
      first_name: "Corey",
      last_name: "Floyd",
      phone_number: "+43 123123123",
      email_address: "github@krausefx.com",
      demo_user: "demoUser",
      demo_password: "demoPass",
      notes: "such notes, very text"
    )

    deliver(
      ipa: ipa_path,
      submit_for_review: true,
      automatic_release: false,
      build_number:build.to_i,
    )

    tag_release
  end
  
  
  desc "Download dSYMs from iTunes Connect"
  lane :dsyms do |options|
    app_identifier = options[:app_identifier]
    version = options[:version]
    build_number = options[:build_number]  || latest_testflight_build_number(app_identifier: app_identifier)
    ipa_path = options[:ipa_path]
    output_directory = options[:output_directory] || "build"
    
    raise "Missing parameters" unless app_identifier && version && build_number && ipa_path && output_directory
    
    download_dsyms(
      build_number: build_number.to_s,
      version: version.to_s,
      app_identifier: app_identifier,
      output_directory: output_directory
    ) # Download dSYM files from iTC
  end
  
  lane :dsyms_alpha do |options|
    app_identifier = "org.wikimedia.wikipedia.tfalpha"
    ipa_path = "build/Wikipedia Alpha.ipa"
    version = options[:version] || get_version_number_from_options(options)
    dsyms(
      app_identifier: app_identifier,
      version: version,
      build_number: options[:build_number],
      ipa_path: ipa_path
    )
  end
  
  lane :dsyms_beta do |options|
    app_identifier = "org.wikimedia.wikipedia"
    ipa_path = "build/Wikipedia.ipa"
    version = options[:version] || get_version_number_from_options(options)
    dsyms(
      app_identifier: app_identifier,
      version: version,
      build_number: options[:build_number] || options[:build],
      ipa_path: ipa_path
    )
  end
  
  lane :dsyms_beta_app do |options|
    app_identifier = "org.wikimedia.wikipedia.tfbeta"
    ipa_path = "build/Wikipedia.ipa"
    version = options[:version] || get_version_number_from_options(options)
    dsyms(
      app_identifier: app_identifier,
      version: version,
      build_number: options[:build_number] || options[:build],
      ipa_path: ipa_path
    )
  end
  
end
