# Customise this file, documentation can be found here:
# https://github.com/krausefx/fastlane#customise-the-fastfile
# vim: ft=ruby

ENV['XCODE_WORKSPACE'] = 'Wikipedia.xcworkspace'

# Returns true if the `NO_RESET` env var is set to 1
def reset_disabled?
  ENV['NO_RESET'] == '1'
end

# Returns true if the `NO_DEPLOY` env var is set to 1
def deploy_disabled?
  ENV['NO_DEPLOY'] == '1'
end

# Runs goals from the project's Makefile, this requires going up to the project directory.
# :args: Additional arguments to be passed to `make`.
# Returns The result of the `make` command
def make(args)
  # Maybe we should write an "uncrustify" fastlane action?...
  Dir.chdir '..' do
    sh 'make ' + args
  end
end

def pre_check
  make 'lint'
  xctest({
    scheme: 'Wikipedia',
    destination: "platform=iOS Simulator,name=iPhone 6,OS=8.2",
    report_formats: [ "html", "junit" ],
    report_path: "build/reports/iOS82/report.xml",
    clean: nil
  })
end

before_all do
  p ENV
  unless reset_disabled?
    reset_git_repo :force
    ensure_git_status_clean
  end
  pre_check
end

lane :test do
  # pre_check already being done in before_all
  # we can put the pre_check impl here if/when fastlane adds support
  # for inter-lane dependencies
end

lane :alpha do
  # Download the Certificate for signing
  cert

  # Create and/or download the right provisioning profile
  sigh({
    force: true,
    provisioning_name: 'TF Alpha',
    app_identifier: 'org.wikimedia.wikipedia.tfalpha',
  })

  # Create the app in iTunes Connect if needed
  produce({
    produce_username: 'cfloyd@wikimedia.org',
    produce_app_identifier: 'org.wikimedia.wikipedia.tfalpha',
    produce_app_name: 'Wikipedia Alpha',
    produce_language: 'English',
    produce_version: '4.1.1',
    produce_sku: '01985',
  })

  increment_build_number ENV['BUILD_NUMBER'].to_i

  # Create and sign the IPA (and DSYM)
  ipa({
    scheme: 'Wikipedia Alpha',
    configuration: 'Alpha', #Prevents fastlane from passing --configuration "Release" - bug?
    clean: nil, # this means 'Do Clean'. Clean project before building.
    archive: nil, # this means 'Do Archive'. Archive project to the Xcode organizer after building.
    # verbose: nil, # this means 'Do Verbose'.
  })

  unless deploy_disabled?
    # Upload the DSYM to Hockey
    hockey({
      api_token: 'c881c19fd8d0401682c4640b7948ef5e',
      notes: "Changelog",
      notify: 0,
      status: 1, #Means do not make available for download
    })

    # Upload the IPA and DSYM to iTunes Connect
    deliver :testflight, :beta, :skip_deploy, :force
  end
end

lane :beta do
  # Download the Certificate for signing
  cert

  # Create and/or download the right provisioning profile
  sigh({
    force: true,
    provisioning_name: 'TF Beta',
    app_identifier: 'org.wikimedia.wikipedia.tfbeta',
  })

  # Create the app in iTunes Connect if needed
  produce({
    produce_username: 'cfloyd@wikimedia.org',
    produce_app_identifier: 'org.wikimedia.wikipedia.tfbeta',
    produce_app_name: 'Wikipedia Beta',
    produce_language: 'English',
    produce_version: '4.1.1',
    produce_sku: '01984',
  })

  increment_build_number ENV['BUILD_NUMBER'].to_i

  # Create and sign the IPA (and DSYM)
  ipa({
    scheme: 'Wikipedia Beta',
    configuration: 'Beta', #Prevents fastlane from passing --configuration "Release" - bug?
    clean: true,
    archive: nil
  })

  unless deploy_disabled?
    # Upload the DSYM to Hockey
    hockey({
      api_token: 'c881c19fd8d0401682c4640b7948ef5e',
      notes: "Changelog",
      notify: 0,
      status: 1,
    })

    deliver :testflight, :beta, :force
  end
end

lane :appstore do
  snapshot
  frameit
  unless deploy_disabled?
    deliver :skip_deploy, :force
  end
end

# after_all do |lane|
# end

# error do |lane, exception|
# end

